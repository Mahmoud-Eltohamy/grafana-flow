name: Release

on:
  push:
    tags:
      - 'v*' # Run workflow on version tags, e.g. v1.0.0.

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }} # Requires a Grafana API key from Grafana.com.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install dependencies
        run: npm ci

      - name: Build plugin
        run: npm run build
        
      - name: List build output
        run: |
          echo "Contents of dist directory:"
          ls -la dist/
          echo "Contents of plugin.json:"
          cat dist/plugin.json

      - name: Verify version replacement
        run: |
          if grep -q "%VERSION%" dist/plugin.json; then
            echo "::error::Version placeholder was not replaced in plugin.json"
            exit 1
          fi
          if grep -q "%TODAY%" dist/plugin.json; then
            echo "::error::Date placeholder was not replaced in plugin.json"
            exit 1
          fi
          echo "Version replacement verification passed"

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]; then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          else
            echo "has-backend=false" >> $GITHUB_OUTPUT
          fi

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: coverage

      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: buildAll

      - name: Warn missing Grafana API key
        run: |
          echo "::warning::Please generate a Grafana API key: https://grafana.com/docs/grafana/latest/developers/plugins/sign-a-plugin/#generate-an-api-key"
          echo "::warning::Once done please follow the instructions found here: https://github.com/${{github.repository}}/blob/main/README.md#using-github-actions-release-workflow"
        if: ${{ env.GRAFANA_API_KEY == '' }}

      - name: Sign plugin
        run: npm run sign
        if: ${{ env.GRAFANA_API_KEY != '' }}

      - name: Verify build output
        run: |
          if [ ! -f "dist/plugin.json" ]; then
            echo "::error::Build failed - plugin.json not found in dist directory"
            exit 1
          fi
          echo "Build verification successful"

      - name: Get plugin metadata
        id: metadata
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          if [ ! -f "dist/plugin.json" ]; then
            echo "::error::plugin.json not found in dist directory"
            exit 1
          fi

          export GRAFANA_PLUGIN_ID=$(jq -r .id dist/plugin.json)
          export GRAFANA_PLUGIN_VERSION=$(jq -r .info.version dist/plugin.json)
          export GRAFANA_PLUGIN_TYPE=$(jq -r .type dist/plugin.json)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5

          if [ "$GRAFANA_PLUGIN_ID" = "null" ] || [ "$GRAFANA_PLUGIN_VERSION" = "null" ]; then
            echo "::error::Failed to extract plugin metadata from plugin.json"
            exit 1
          fi

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "plugin-type=${GRAFANA_PLUGIN_TYPE}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
          echo "archive-checksum=${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}" >> $GITHUB_OUTPUT

          echo "github-tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Read changelog
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            awk '/^## / {s++} s == 1 {print}' CHANGELOG.md > release_notes.md
            echo "path=release_notes.md" >> $GITHUB_OUTPUT
          else
            echo "::warning::CHANGELOG.md not found, creating empty release notes"
            touch release_notes.md
            echo "path=release_notes.md" >> $GITHUB_OUTPUT
          fi

      - name: Check package version
        run: |
          if [ "v${{ steps.metadata.outputs.plugin-version }}" != "${{ steps.metadata.outputs.github-tag }}" ]; then
            echo "::error::Plugin version (v${{ steps.metadata.outputs.plugin-version }}) doesn't match tag name (${{ steps.metadata.outputs.github-tag }})"
            exit 1
          fi
          echo "Version check passed: ${{ steps.metadata.outputs.github-tag }}"

      - name: Package plugin
        id: package-plugin
        run: |
          if [ ! -d "dist" ]; then
            echo "::error::dist directory not found"
            exit 1
          fi
          
          # Verify plugin.json exists and has correct content
          if [ ! -f "dist/plugin.json" ]; then
            echo "::error::plugin.json not found in dist directory"
            exit 1
          fi
          
          # Create plugin directory with correct structure
          mkdir -p ${{ steps.metadata.outputs.plugin-id }}
          cp -r dist/* ${{ steps.metadata.outputs.plugin-id }}/
          
          # Verify the structure
          echo "Plugin directory structure:"
          ls -la ${{ steps.metadata.outputs.plugin-id }}/
          
          # Create the zip archive
          zip -r ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }}
          
          if [ ! -f "${{ steps.metadata.outputs.archive }}" ]; then
            echo "::error::Failed to create plugin archive"
            exit 1
          fi
          
          # Generate checksum
          md5sum ${{ steps.metadata.outputs.archive }} > ${{ steps.metadata.outputs.archive-checksum }}
          echo "checksum=$(cut -d' ' -f1 ./${{ steps.metadata.outputs.archive-checksum }})" >> $GITHUB_OUTPUT
          
          # Show final archive info
          echo "Plugin packaged successfully: ${{ steps.metadata.outputs.archive }}"
          echo "Archive size: $(ls -lh ${{ steps.metadata.outputs.archive }} | awk '{print $5}')"
          echo "Archive contents:"
          unzip -l ${{ steps.metadata.outputs.archive }}

      - name: Validate plugin
        run: |
          git clone --depth 1 https://github.com/grafana/plugin-validator
          cd ./plugin-validator/pkg/cmd/plugincheck2
          go install
          cd ../../../..
          
          if ! command -v plugincheck2 &> /dev/null; then
            echo "::error::Failed to install plugin validator"
            exit 1
          fi
          
          plugincheck2 -config ./plugin-validator/config/default.yaml ${{ steps.metadata.outputs.archive }}

      - name: Create Github release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
          files: |
            ./${{ steps.metadata.outputs.archive }}
            ./${{ steps.metadata.outputs.archive-checksum }}
          body: |
            **This Github draft release has been created for your plugin.**

            _Note: if this is the first release for your plugin please consult the [distributing-your-plugin section](https://github.com/${{github.repository}}/blob/main/README.md#distributing-your-plugin) of the README_

            If you would like to submit this release to Grafana please consider the following steps:

            - Check the Validate plugin step in the [release workflow](https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}) for any warnings that need attention
            - Navigate to https://grafana.com/auth/sign-in/ to sign into your account
            - Once logged in click **My Plugins** in the admin navigation
            - Click the **Submit Plugin** button
            - Fill in the Plugin Submission form:
              - Paste this [.zip asset link](https://github.com/${{ github.repository }}/releases/download/v${{ steps.metadata.outputs.plugin-version }}/${{ steps.metadata.outputs.archive }}) in the Plugin URL field
              - Paste this [.zip.md5 link](https://github.com/${{ github.repository }}/releases/download/v${{ steps.metadata.outputs.plugin-version }}/${{ steps.metadata.outputs.archive-checksum }}) in the MD5 field

            Once done please remove these instructions and publish this release.
